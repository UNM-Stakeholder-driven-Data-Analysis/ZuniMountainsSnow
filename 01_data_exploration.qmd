---
title: "Data Exploration and Approach"

editor: source
output:
  html_document:
    fig_caption: true
project:
    execute-dir: project
---

# Zuni Mountains Puerco Project Area Tree Cover 2000-2015

Josh Lopez-Binder, Spring 2022, Stakeholder Driven Analysis

Note: The following data exploration shows results from the Puerco Project Area, which has had many smaller US Forest Service (USFS) activities occur within it in the past. Only recently (03-02-2023) did Livia and I find a complete data set of USFS Activities. The USFS Activities data set includes thinning treatments, locations, and date-completed attributes. The following investigation of data distributions and data relationships will be re-calculated for thinning treatment areas once they are identified.

## Data Exploration

### Data Types

#### Tree Cover Raster Data

**Data source**: <https://lpdaac.usgs.gov/products/gfcc30tcv003/>

**Variables Of Interest**: Raster data where each cell contains a numerical, integer value between zero and one hundred. This value represents fraction of tree cover, 100 being full tree cover. There also exist corresponding pixels which express Tree Cover Error as a percentage (numerical, floating point values between 0 and 100). I have not yet considered how to use the error data.

**Units**: Raster cells are 30 meters by 30 meters. The data uses the World Geodetic System (WGS84) Datum and UTM zone 13N Projection. The units of the projection are in meters where positive x is east, positive y is north.

#### Project Area Vector Data

**Data Source**: Stakeholder communication and US Forest Service Southwestern Region GIS Data \> Activities: <https://www.fs.usda.gov/detailfull/r3/landmanagement/gis/cid=stelprdb5201889&width=full>

**Variables of Interest**: Polygon vector data which represent the USFS activities, including thinning treatments. Vector coordinates are continuous numerical values. Attributes associated with each polygon include treatment activity and date completed. 

**Units**: Meters, NAD 1983 datum using the Lambert Conformal Conic projection.

```{r echo=FALSE, include=FALSE}

##### read me ####
# the purpose of this script is to visualize spatial tree cover data for the 
# zuni mountains as well as
# - merge TC images
# - crop merged TC image to project area
# - describe dataset size
# - describing data types
# - checking data distributions
# - checking for spatial autocorrelation
# - checking for temporal autocorrelation
# - checking for correlation between variables <?

#### Libraries ####
library(tidyverse)
library(raster)
#NOTE rgdal is going to be retired by end of 2023. work for now so leaving it
# See https://r-spatial.org/r/2022/04/12/evolution.html and 
# https://github.com/r-spatial/evolution
library(rgdal)
library(sf)
library(spdep)
library(raster)
library(terra)
library(rasterVis)
library(sp)
library(gridExtra)
library(grid)
library(ggplot2)
library(comprehenr)
#load the diver0 function which sets colors to divergin from 0
devtools::source_gist('306e4b7e69c87b1826db')
library(knitr)
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

```{r echo=FALSE, include=FALSE}
#Unfortunately cannot cache due to technical reasons with terra: 
# https://stackoverflow.com/questions/72648083/can-knitrs-cache-work-with-pointer-objects


#### constants ####
options(digits=2)
im.width = 1024
aspect.r = 0.707 #0.707 is a conve nient aspect.ratio
queens = matrix(c(1,1,1,1,0,1,1,1,1),3)
rooks = matrix(c(0,1,0,1,0,1,0,1,0),3)
bishops = matrix(c(1,0,1,0,0,0,1,0,1),3)

imgFolder = "./GeneratedPlots"

#### functions ####
YearFile <- function(year, path, row){
  identifier = paste("p", path, "r", row, "_TC_", toString(year), sep="")
  file_path <- file.path(".",
                         "data", 
                         paste("GFCC30TC_", toString(year), sep=""),
                         paste("GFCC30TC_", identifier, sep=""),
                         paste(identifier, ".tif", sep=""))
  return(file_path)
}

MergedRaster <- function(year){

  p035r035 <- rast(YearFile(year, "035", "035"))
  p035r036 <- rast(YearFile(year, "035", "036"))
  
  final <- merge(p035r035, p035r036)
  time(final) <- year
  set.names(final, paste("yr", toString(year), sep=""))
  return(final)
}

OnlyTreeCover <- function(treeCover){
  #From https://lpdaac.usgs.gov/documents/1371/GFCC_User_Guide_V1.pdf
  # 0-100: percent tree cover
  # 200: water
  # 210: cloud
  # 211: shadow
  # 220: fill value
  replace_mat = cbind(id=c(200, 210, 211, 220), v=c(NaN, NaN, NaN, NaN))
  treeCover <- classify(treeCover, replace_mat)
  return(treeCover)
  
}

ProcessData <- function(treeCoverRaw, projectArea){
  #TODO: use pipes?
  
  # crop to study area
  zm_cover <- terra::crop(treeCoverRaw, projectArea)
  
  # remove non tree cover pixels
  zm_cover <- OnlyTreeCover(zm_cover)
  
  # remove tree cover pixels outside the project area
  zm_cover <- terra::mask(zm_cover, projectArea)
  
  return(zm_cover)
  
}

HistYear <- function(freqAll, yr){
  p1 <- ggplot(data=filter(freqAll, year==yr), aes(value, relFreq))
  
  p1 <- p1 + geom_col(width = 1.0)
  p1 <- p1 + geom_point(mapping=aes(value,freq0), size=.75)
  
  p1 <- p1 + ylim(0,max(freqAll$relFreq))
  #p1 <- p1 + xlim(0,max(freqAll$value))
  p1 <- p1 + scale_x_continuous(breaks=seq(0,55,by=5),
                                minor_breaks=0:53,
                                limits=c(-1,max(freqAll$value)+1)) #limits seem to be not inclusive
  p1 <- p1 + labs(x="Percent Cover", y="relative frequency",title =toString(yr))
  return(p1)
}

RelFreq <- function(rasterData){
  h <- as.data.frame(terra::freq(rasterData))
  numPix = sum(h$count)
  return(mutate(h, relFreq=count/numPix))
}

#### load data ####
#TODO: get .gdb file loaded of SW USFS Activities

puerco_area_spat <- terra::vect("./data/Puerco Project Area/puerco_Project-polygon.shp")


tc2015 <- MergedRaster(2015)
tc2010 <- MergedRaster(2010)
tc2005 <- MergedRaster(2005)
tc2000 <- MergedRaster(2000)

#For some reason tc2010 has a different coord. ref designation that omits
# the datum, although the UTM zone is the same.
tc2010 <- terra::project(tc2010, tc2015)

#### Get Puerco Project Area ####
puerco_area_spat <- terra::project(puerco_area_spat, tc2015)
puerco_area_raster <- terra::rasterize(puerco_area_spat, tc2015)
#manual extent is clunky but it allows trim operation to be wayyy faster
manual_extent = ext(700000, 750000, 3900000, 3950000) 
puerco_area_raster <- terra::crop(puerco_area_raster, manual_extent)
#visual check that we are not cropping parts of the project area
#plot(puerco_area_raster) 
#remove border of NaN values
puerco_area_raster <- terra::trim(puerco_area_raster) 
#plot(puerco_area_raster)
#### process Data ####

zm_c_2015 <- ProcessData(tc2015, puerco_area_raster)
zm_c_2010 <- ProcessData(tc2010, puerco_area_raster)
zm_c_2005 <- ProcessData(tc2005, puerco_area_raster)
zm_c_2000 <- ProcessData(tc2000, puerco_area_raster)
#TODO: verifiy only contains 0-100 value now

# get max percent value for all
all <- c(zm_c_2015, zm_c_2010, zm_c_2005, zm_c_2000)
minMaxAll <- minmax(all)
maxPercent <- max(minMaxAll[2,])
```

### Data Distributions

In @fig-perc the percent tree cover is visualized for the Puerco Project area, for the four years: 2000, 2005, 2010, 2015. Note that the color scale goes from 0 to 53 percent cover. This was the maximum value across all four years. It is interesting to note that the region roughly at 720,000m east, 3,915,000m north appears to have had highest cover in 2010, and decreased by 2015.

Changes in cover are shown more clearly @fig-diff. Here the difference between percent tree cover ("cover") for consecutive years is shown. This is calculated by subtracting each corresponding pixel's cover for the earlier year from the later year. Positive values indicate the tree cover went up for that pixel, negative values indicate the tree cover went down. I expect that regions of reduced tree cover will correlate with thinning treatments.

```{r figs, echo=FALSE}
#| label: fig-perc
#| fig-cap: "Percent Tree Cover for the Puerco Project Area, 2000-2015"
p <- levelplot(all, 
               at=seq(0, maxPercent),
               main="Percent Tree cover for the Puerco Project Area",
               xlab='UTM meters',
               ylab='UTM meters',
               margin=FALSE)
plot(p)
```

```{r echo=FALSE}
#| label: fig-diff
#| fig-cap: "Difference in Percent Tree Cover for consecutive years (later year - earlier year)"
diffs <- c(all$yr2015 - all$yr2010, all$yr2010-all$yr2005, all$yr2005-all$yr2000)
names(diffs) <- c("yr2015vs2010", "yr2010vs2005", "yr2005vs2000")
p <- levelplot(diffs, 
          main="Difference in Percent Tree cover for the Puerco Project Area",
          xlab='UTM meters',
          ylab='UTM meters',
          margin=FALSE,
          par.settings=list(panel.background=list(col="lightgrey"), 
                            strip.background=list(col="white")))
p <- diverge0(p, 'PiYG')
plot(p)
```

@fig-hist shows a relative frequency histogram of percent tree cover values for the tree cover data within the Puerco Project area, for all four years. Evidence of an overall trend in reduced tree cover over time is shown by higher density regions moving towards lower percent cover between consecutive years. For example, there is a high frequency of 45-48% cover cells in 2010, but in 2015 the frequency of this range is approximately zero. This may be a result of USFS vegetation treatments which include prescribed burns, tree thinning, and mechanical mastication. This may also be due to error in the calculation, so an important next step will be to incorporate the error pixels. Conversely, there is a high relative frequency of zero cover cells in 2000 (greater than 0.06), whereas in 2005 that relative frequency drops to below 0.03. This may be indicative of tree growth converting 0% cover cells to 1% or higher, or error.

This data is not normal. It does exhibit a pattern where higher densities occur at lower percent tree-cover values. This is expected to look significantly different for actual thinning projects, because the project is likely drawn around an area that contains many trees, whereas these plots are for a much larger region that includes treeless regions (large black regions in @fig-perc). A different view of data distributions is included in @fig-kernel, which shows a kernel density plot of the same data in @fig-hist.

```{r echo=FALSE}
#| label: fig-hist
#| fig-cap: "Relative Frequency of Percent Cover separated by year. Dots indicate that one pixel had that percent cover value"

freq_2000 <- RelFreq(zm_c_2000) %>% mutate(year=2000)
freq_2005 <- RelFreq(zm_c_2005) %>% mutate(year=2005)
freq_2010 <- RelFreq(zm_c_2010) %>% mutate(year=2010)
freq_2015 <- RelFreq(zm_c_2015) %>% mutate(year=2015)
freqAll <- bind_rows(freq_2000, freq_2005, freq_2010, freq_2015)
freqAll$freq0 <- ifelse(freqAll$count==1, 0, NA) #for plotting near 0 relFreq.

p1 <- HistYear(freqAll, 2015)
p2 <- HistYear(freqAll, 2010)
p3 <- HistYear(freqAll, 2005)
p4 <- HistYear(freqAll, 2000)


grid.arrange(p1, p2, p3, p4, 
             ncol=2,
             top=textGrob("Percent Tree Cover for the Puerco Project Area"))
```

```{r echo=FALSE}
#| label: fig-kernel
#| fig-cap: "Kernel Density plots of percent cover values found in the Puerco Project Area for the years 2000, 2005, 2010 and 2015. Ticks along the horizontal axis show where actual values lie"
allYrsRaster <- raster::stack(raster(zm_c_2015), raster(zm_c_2010), raster(zm_c_2005), raster(zm_c_2000))
p <- rasterVis::densityplot(allYrsRaster,
                       xlab='Percent Cover', 
                       ylab='Density', 
                       main='Kernel Density Plot for Percent Cover in the Puerco Project Area, 2000-2015',
                       draw.labels = FALSE,
                       lwd = 2)
plot(p)
```

### Data Structures and Relationships

Local spatial autocorrelation is shown in @fig-queen, @fig-rook, and @fig-bishop. These show Local Moran's Index values that consider all 8 neighbors (Queen's Case), the four neighbors that share an edge (Rook's Case), and the four neighbors that share a corner only (Bishop's Case), respectively (see appendix for an image). Overall, for all three neighbor configurations, the majority of cells have 0 or greater local autocorrelation values, indicating that most cells are randomly distributed (0) or clustered among similar valued cells (\>0). It also appears that highest autocorrelation occurs where tree densities are highest, judging by a visual comparison between @fig-perc and @fig-queen. I hypothesize that tree thinning will reduce autocorrelation both locally and globally within the treatment area, because it tends to randomly reduce percent cover at a 30m scale. This is just an assumption; I have not researched tree-thinning procedures yet or discussed this with Livia.

```{r echo=FALSE, include=FALSE}
##### Autocorrelation test #####

#TODO: terra::autocor does not give p-values, which are needed to asses significance 
#of computed Moran's I. shoot.
#global moran's range from -1 (dispersed) to 1 (clustered)

q.ac.loc <- lapply(all, terra::autocor, w=queens, global=FALSE)
#I know this is ugly but can't seem to get terra::sapp to work
queensAc <- c(q.ac.loc[[1]], q.ac.loc[[2]], q.ac.loc[[3]], q.ac.loc[[4]])
queens.ac.glob <- unlist(lapply(all, terra::autocor, w=queens, global=TRUE))

rooksAc <- lapply(all, terra::autocor, w=rooks, global=FALSE)
rooksAc <- c(rooksAc[[1]], rooksAc[[2]], rooksAc[[3]], rooksAc[[4]])
rooks.ac.glob <- unlist(lapply(all, terra::autocor, w=rooks, global=TRUE))



bishopsAc <- lapply(all, terra::autocor, w=bishops, global=FALSE)
bishopsAc <- c(bishopsAc[[1]], bishopsAc[[2]], bishopsAc[[3]], bishopsAc[[4]])
bishops.ac.glob <- unlist(lapply(all, terra::autocor, w=bishops, global=TRUE))

#comparison of Moran's I, Global
comp.i.glob <- data.frame(bishops.ac.glob, queens.ac.glob, rooks.ac.glob)
comp.i.glob
write.csv(comp.i.glob, file.path(imgFolder, "moransIglobal_compare.csv"), row.name=TRUE)


DivergePlot <- function(tc, caseType){
  p <- levelplot(tc,
                 margin=FALSE,
                 main = paste("Local Spatial Autocorrelation", caseType),
                 par.settings=list(panel.background=list(col="lightgrey"),
                                   strip.background=list(col="white")))
  p <- diverge0(p, 'RdBu')
  return(p)
}
```

```{r echo=FALSE}
#| label: fig-queen
#| fig-cap: "Local Moran's Index of Autocorrelation, Queen's case. Blue values indicate high autocorrelation. Red values indicate inverse of autocorrelation, where cells are dissimilar to their neighbors"
DivergePlot(queensAc, "Queen's Case")
```

```{r echo=FALSE}
#| label: fig-rook
#| fig-cap: "Local Moran's Index of Autocorrelation, Rook's case. Blue values indicate high autocorrelation. Red values indicate inverse of autocorrelation, where cells are dissimilar to their neighbors"
DivergePlot(rooksAc, "Rook's Case")
```

```{r echo=FALSE}
#| label: fig-bishop
#| fig-cap: "Local Moran's Index of Autocorrelation, Bishop's case. Blue values indicate high autocorrelation. Red values indicate inverse of autocorrelation, where cells are dissimilar to their neighbors"
DivergePlot(bishopsAc, "Bishop's Case")
```

Global Measure of autocorrelation allow comparisons between Queen's, Rook's and Bishop's case. The probability-based method proposed below is impacted by Bishop's case neighborhood autocorrelations. For this reason the three methods are compared in @tbl-moranComp. This table shows that Bishop's global autocorrelation is consistently less than Queen's which is consistently less than Rooks. This pattern indicates, as expected, that cells which only share a corner are less autocorrelated than cells which share an edge. All values, except those in the year 2000, are above 0.80, indicating an overall high level of spatial autocorrelation.

```{r echo=FALSE}
#| label: tbl-moranComp
#| tbl-cap: "Global Moran's Index of Autocorrelation for Bishop's, Queens and Rook's neighbors. Bishops is consistently less than Queens which is consistently less than Rook's. However, all values are relatively close to 1, except for the year 2000. Overall this indicates high autocorrelation for the study area."
comp.i.glob <- data.frame(bishops.ac.glob, queens.ac.glob, rooks.ac.glob)
colnames(comp.i.glob) = c("Bishop's", "Queen's", "Rook's")
knitr::kable(comp.i.glob)
```

## Data Approach

*Are the USFS thinning treatments affecting the snowpack accumulation potential in the Zuñi mountains?* 

We hypothesize that thinning is reducing snowpack accumulation potential because it has the effect of creating more large, \>30m gaps between tree cover.

A previous study conducted using high resolution data (1m cell size) of snowpack in the Jemez Mountains found that the optimal condition for snowpack accumulation was, on average, clear ground within 15 meters of tree cover (Broxton et al., 2015). This value does not take into consideration the observed pattern that snowpack accumulated less on south-facing sides of trees in the Jemez Mountains (Broxton et al., 2015), suggesting that in that region solar irradiation has large impact on snowpack. The 15m distance threshold will be used to assess snowpack accumulation potential instead of directly measuring snowpack. Snowpack data is unavailable at high enough resolutions to be meaningful. Solar irradiation may also be considered. Hereafter the word "optimal" will refer to clear, treeless ground that is within 15m of tree cover.

The Data Approach involves three general steps:

1.  Find thinning treatments between 2000 and 2015 within the study area.
2.  Calculate a metric that captures the notion of "amount of optimal area" before and after the thinning treatment.
3.  Evaluate direction of change, magnitudes of change and significance levels.

### 1. Find Thinning Treatments between 2000 and 2015

The Project Area Vector Data will be used to locate thinning treatments within the Zuñi Mountains that were completed sometime between the years 2000 and 2015. The following operations will be performed:

-   Import .gdb of USFS Cibola Activities
-   Select activities that occurred within the Zuñi Mountains. (The data set includes all of Cibola National Forest activities)
-   From that selection select activities that occurred between 2000 and 2015 and consisted of tree-thinning
-   Depending on the number, verify that thinning occurred by visual inspection of google earth imagery, or other image databases.
-   Verify chosen sites with stakeholder.

Future Work, time permitting:

-   Find burned area data
-   Answer the following: Do burned areas that occurred before or after thinning alter snowpack accumulation?

### 2. Calculate Snowpack Accumulation Potential

The tree cover dataset is at 30m resolution. This makes addressing the question difficult, because the characteristic distance for optimal snowpack accumulation, 15m or less, is smaller than the resolution. For this reason, the approach will follow a prioritized list, with simplest analysis first, and then more complex analysis if the previous were found to be inconclusive:

1.  Sum the area of all low tree-cover cells surrounded by high tree-cover cells.
    i.  Completely Surrounded Empty Cells
    ii. Bordered on the Southern Edge and Sufficient Additional Edges
2.  Assign a probability of a given low tree-cover cell being entirely optimal, based on its neighbors.
    i.  Equal weight to neighbors (rook's case)
    ii. Larger weight for south-facing neighbors (modified rook's case)
3.  Assign a maximum likelihood amount of optimal area based on a cell's cover.
    i.  ignoring neighbor interactions
    ii. including neighbor interactions

#### Approach 1: Sum the area of low cover cells that are surrounded by high cover cells.

This method requires defining a threshold for "low cover" and "high cover."

The following logic results in an upper limit for "low cover" at 10%: A manual inspection of google earth imagery in three locations of the study area showed typical crown diameters to be between 3 and 6 meters. Choosing the lower limit at 3m, we can say that a 3x3m sub-cell that contains a tree is likely to be 100% covered by canopy. This allows us to assume any 3x3m sub-cell can only be 0% or 100% covered. Next, assuming shading is the most important factor for protecting snowpack, we can say that if the southern edge of a cell is completely covered by 3x3m sub-cells (10 cells), roughly half of the 30x30m cell will be optimal area within 15m of tree cover. Therefore, the first time there is a *chance* of getting 50% optimal cover within a cell (irrespective of neighbors) is at 10% cover. A similar argument may be made for focusing on the first time ~100% optimal cover may be achieved, which is at 20 cells or 20% cover, when two rows of trees line up. Therefore, a lower limit for high cover should be no smaller than 20%. For high cover, I need more time to see if a similar line of reasoning is possible to set an exact number. As a last resort the lower limit for high cover could by 90% of the full range in values for the area. In this case that would be 48% \* 0.90 = 43.2% cover. Referring to @fig-hist, the highest percent cover cells that occur in significant (\>1) numbers is 48%.

##### I. Completely Surrounded Empty Cells:

Cells will be identified that 1) are low cover and 2) are surrounded by high cover. These cells can be assumed to be effectively 100% optimal area because every point in the 30m x 30m cell is within 15 m of high tree cover. The area of those cells can then be summed. Then the total optimal area can be compared before and after thinning. If this method results in an area too small to be considered significant, II will be used. Considering that cells with similar values tend to be randomly distributed or clustered together (see data distribution section), it is likely that this total area will be low.

##### II. Bordered on the Southern Edge and Sufficient Additional Edges:

Cells will be identified that A) are low cover B) are bordered by high cover on the southern edge and C) bordered by high cover on enough additional edges to ensure the central cell is entirely optimal. This incorporates the assumption that shading by trees is the primary driver of protecting snowpack. Including other edges incorporates the more general statement that any area within 15 meters of tree cover is optimal. Other ways tree can shelter snowpack is by blocking wind or altering wind patterns (Broxton et al., 2015). This method will likely result in a greater number of cells being counted then method I.

Pros:

-   Simple calculation
-   Units are m\^2 which is easy to interpret

Cons:

-   The upper limit observed is 48% cover. So for a neighbor with "high cover", that 48% cover could be distributed anywhere in the cell, removing the protective influence on the low cover cell in question. This would invalidate the assumption that the entire cell is optimal.
-   A cell with "high" cover according to the above definition (\>43%) may have substantial area within itself that is optimal. This is being ignored completely.
-   There may be so few cells that meet the criterion that comparisons are not meaningful. If this is the case move to the next approach

#### Approach 2: Assign a probability of a given low-tree cover cell being entirely optimal, based on its neighbors

In this approach the condition for being optimal is relaxed, in the attempt to count more cells. The same method as in Approach 1 will be used for choosing an upper limit for low-tree cover. Neighboring cells, in contrast, are assigned a probability of having tree cover that is at the edge of the cell in question. Because the sampled cells have a max cover value of \~48% this probability will never be 1. To assign a probability that tree cover exists at one edge of the neighboring cell the following method will be used:


1.  Find the probability that, within a cell, one particular edge is bordered by tree cover, for the observed cover value (see appendix)
2.  Calculate the probability that the low-cover cell is surrounded by tree cover based on the four neighbors that share an edge. Let the probability that the northern neighbor adjacent edge is covered be denoted as P(n). Then the probability that all 4 edges are covered is P(n AND s AND e AND w), where n, s, e, w correspond to the four cardinal directions. If these probabilities are independent this is equal to a simple multiplication: P(n) \* P(s) \* P(e) \* P(w). @fig-bishop and @tbl-moranComp show that autocorrelation for cells connected by corners, as is the case for the north, south, east and west neighbors, is high. Therefore, the assumption that P(n), P(s), P(e) and P(w) are independent is not entirely valid. P(n) is a function of cell cover, so autocorrelation of cell cover will map to autocorrelation of edge cover probability. An effort will need to be made to account for this autocorrelation. Right now I do not know how this will work.

##### I. Equal weight to neighbors (rook's case):

This will be the simple multiplication proposed above: P(n AND s AND e AND w) = P(n) x P(s) x P(e) x P(w).

##### II. Larger importance for south-facing neighbors (modified rook's case): 

This will be the probability that: 1) the southern neighbor has tree cover at the shared edge, and 2) either a) the east and west neighbors have edge cover only or b) the north neighbor has edge cover only or c) east, west and north neighbors have edge cover. This probability can be calculated relatively easily, assuming independence of events, but is too long to place here.

Pros:

-   Allows more cells to be included in the comparison

Cons:

-   Requires an additional step of calculating probability of edge coverage
-   Metric assigns a probability to cells. Therefore, a comparison of probability frequency distributions before and after thinning will be required. The resulting comparison does not result in an area value. We may be able to find if thinning impacted optimal snowpack, but not by how much.
-   Assumes that individual trees do not exhibit spatial autocorrelation within a cell.
-   Assumes low autocorrelation between for Bishop's case neighbors.

#### Approach 3. Assign a maximum likelihood amount of optimal area based on a cell’s cover.

The idea here is to generate a probability distribution of within-cell optimal area for each possible cell cover value.
I have not had the time to explore this in depth, and I hope it will not be necessary. It seems too complicated.

### 3. Evaluate Change Direction, Magnitudes, and Significance Levels

#### 1: Significance for a Difference in Optimal Measured Area

This metric would be the total area of 30x30m spaces that are within 15m of tree cover. According to the hypothesis we should see a smaller total optimal area after thinning, and of a significant magnitude, as judged by Livia. Because Livia has experience with forest measurements I believe she will be able to evaluate significance.

#### 2: Significance for a Difference in Probability Frequency Distributions

The statistical test for checking for significant differences between frequency distributions of "probability of optimal cell" will depend on the nature of those distributions. I expect those distributions to be right skewed, with the majority of empty cells having a low probability of being optimal. For this reason a Mann-Whitney U test would be used to test the hypothesis that after-thinning values tend to be smaller than before thinning values. In other words, after thinning we will observe more low-cover land that has a low probability-of-being-optimal.

## Appendix

### Find the probability that one edge of a cell is bordered by tree cover.

This approach makes the following assumptions:

1.  A sub-cell size of 3x3m is the smallest cell that is significant, and can be assumed to only take on values of 0% cover or 100% cover (see Approach 1).
2.  The location of sub-cells, essentially representing the smallest possible significant tree, is random within the cell.

There exist 100 total sub-cells within a cell. The number of 100% cover sub-cells (N) is equal to the percent cover (c) for the cell (0-100, integer values). Let P(c) be the probability one edge of the cell is covered when it has percent cover equal to c. P(c) is equal to the number of configurations of N=c sub-cells that result in edge coverage divided by the total number of possible configurations. See the below image for an example.

![Two possible configurations for N=48 (48% cover). The left image would be counted as edge coverage, the right would not.](./diagrams/permutations.png){width="50%"} 

Depending on the how long this calculation takes, P(c) will only be calculated once, for maximal c for the study area (48%). If this is the case a simple monotonically increasing function will be chosen to interpoalte between P(9) and P(48). P(9) must be zero since 9 sub-cells cannot fully cover an edge. 
This is effectively stating "As tree cover increases, it is more likely that one edge of the cell is completely bordered by tree cover." This relationship may not be linear, but it is certainly monotonically increasing. A linear relation is the simplest monotonically increasing function, and will be used unless an argument for a non-linear function proves stronger.

Or, if it is reasonable, P(c) will be calculated for every c found in the study area.

### Neighborhood Weighting Patterns for Spatial Autocorrelation

![Yellow cell is the "cell in question" Green cells are the neighbors being considered](./diagrams/cases.png)

## Sources

Broxton, P. D., Harpold, A. A., Biederman, J. A., Troch, P. A., Molotch, N. P., & Brooks, P. D. (2015). Quantifying the effects of vegetation structure on snow accumulation and ablation in mixed-conifer forests. Ecohydrology, 8(6), 1073--1094. https://doi.org/10.1002/eco.1565
