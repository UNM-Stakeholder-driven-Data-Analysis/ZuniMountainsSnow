---
title: "01_data_exploration"

editor: source
output:
  html_document:
    fig_caption: yes
project:
    execute-dir: project
---

# Data Exploration and Approach

## Zuni Mountains Puerco Project Area Tree Cover 2000-2015

Note: The following data exploration shows results from the Puerco Project Area, which has had many smaller US Forest Service (USFS) activities occur within it in the past. Only recently (03-02-2023) did Livia and I find a complete data set of USFS Activities. The USFS Activities data set includes thinning treatments, locations, and date-completed attributes. The following investigation of data distributions and data relationships will be re-calculated for thinning treatment areas once they are identified.

## Data Exploration

### Data Types

#### Tree Cover Raster Data

**Data source**: <https://lpdaac.usgs.gov/products/gfcc30tcv003/>

**Variables Of Interest**: raster data where each cell contains a numerical, integer value between zero and one hundred. This value represents fraction of tree cover, 100 being full tree cover. There also exist corresponding pixels which express Tree Cover Error as a percentage (numerical, floating point values between 0 and 100).

**Units**: Raster cells are 30 meters by 30 meters. The data uses the World Geodetic System (WGS84) Datum and UTM zone 13N Projection. The units of the projection are in meters where positive x is east, positive y is north.

#### Project Area Vector Data

**Data Source**: Stakeholder communication and US Forest Service Southwestern Region GIS Data \> Activities: <https://www.fs.usda.gov/detailfull/r3/landmanagement/gis/cid=stelprdb5201889&width=full>

**Variables of Interest**: Polygon vector data which represent the USFS activities, including thinning treatments. Vector coordinates are continuous numerical values. Attributes associated with each polygon include treatment activity and date completed. Vector coordinates use the NAD 1983 datum, and the Lamber Conformal Conic projection.

**Units**: Meters

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r echo=FALSE, include=FALSE}

##### read me ####
# the purpose of this script is to visualize spatial tree cover data for the 
# zuni mountains as well as
# - merge TC images
# - crop merged TC image to project area
# - describe dataset size
# - describing data types
# - checking data distributions
# - checking for spatial autocorrelation
# - checking for temporal autocorrelation
# - checking for correlation between variables <?

#### Libraries ####
library(tidyverse)
library(raster)
#NOTE rgdal is going to be retired by end of 2023. work for now so leaving it
# See https://r-spatial.org/r/2022/04/12/evolution.html and 
# https://github.com/r-spatial/evolution
library(rgdal)
library(sf)
library(spdep)
library(raster)
library(terra)
library(rasterVis)
library(sp)
library(gridExtra)
library(grid)
library(ggplot2)
library(comprehenr)
#load the diver0 function which sets colors to divergin from 0
devtools::source_gist('306e4b7e69c87b1826db')
```

```{r echo=FALSE, include=FALSE}
#Unfortunately cannot cache due to technical reasons with terra: 
# https://stackoverflow.com/questions/72648083/can-knitrs-cache-work-with-pointer-objects


#### constants ####
options(digits=2)
im.width = 1024
aspect.r = 0.707 #0.707 is a conve nient aspect.ratio
queens = matrix(c(1,1,1,1,0,1,1,1,1),3)
rooks = matrix(c(0,1,0,1,0,1,0,1,0),3)
bishops = matrix(c(1,0,1,0,0,0,1,0,1),3)

imgFolder = "./GeneratedPlots"

#### functions ####
YearFile <- function(year, path, row){
  identifier = paste("p", path, "r", row, "_TC_", toString(year), sep="")
  file_path <- file.path(".",
                         "data", 
                         paste("GFCC30TC_", toString(year), sep=""),
                         paste("GFCC30TC_", identifier, sep=""),
                         paste(identifier, ".tif", sep=""))
  return(file_path)
}

MergedRaster <- function(year){

  p035r035 <- rast(YearFile(year, "035", "035"))
  p035r036 <- rast(YearFile(year, "035", "036"))
  
  final <- merge(p035r035, p035r036)
  time(final) <- year
  set.names(final, paste("yr", toString(year), sep=""))
  return(final)
}

OnlyTreeCover <- function(treeCover){
  #From https://lpdaac.usgs.gov/documents/1371/GFCC_User_Guide_V1.pdf
  # 0-100: percent tree cover
  # 200: water
  # 210: cloud
  # 211: shadow
  # 220: fill value
  replace_mat = cbind(id=c(200, 210, 211, 220), v=c(NaN, NaN, NaN, NaN))
  treeCover <- classify(treeCover, replace_mat)
  return(treeCover)
  
}

ProcessData <- function(treeCoverRaw, projectArea){
  #TODO: use pipes?
  
  # crop to study area
  zm_cover <- terra::crop(treeCoverRaw, projectArea)
  
  # remove non tree cover pixels
  zm_cover <- OnlyTreeCover(zm_cover)
  
  # remove tree cover pixels outside the project area
  zm_cover <- terra::mask(zm_cover, projectArea)
  
  return(zm_cover)
  
}

#### load data ####
#TODO: get .gdb file loaded of SW USFS Activities

puerco_area_spat <- terra::vect("./data/Puerco Project Area/puerco_Project-polygon.shp")


tc2015 <- MergedRaster(2015)
tc2010 <- MergedRaster(2010)
tc2005 <- MergedRaster(2005)
tc2000 <- MergedRaster(2000)

#For some reason tc2010 has a different coord. ref designation that omits
# the datum, although the UTM zone is the same.
tc2010 <- terra::project(tc2010, tc2015)

#### Get Puerco Project Area ####
puerco_area_spat <- terra::project(puerco_area_spat, tc2015)
puerco_area_raster <- terra::rasterize(puerco_area_spat, tc2015)
#manual extent is clunky but it allows trim operation to be wayyy faster
manual_extent = ext(700000, 750000, 3900000, 3950000) 
puerco_area_raster <- terra::crop(puerco_area_raster, manual_extent)
#visual check that we are not cropping parts of the project area
#plot(puerco_area_raster) 
#remove border of NaN values
puerco_area_raster <- terra::trim(puerco_area_raster) 
#plot(puerco_area_raster)
#### process Data ####

zm_c_2015 <- ProcessData(tc2015, puerco_area_raster)
zm_c_2010 <- ProcessData(tc2010, puerco_area_raster)
zm_c_2005 <- ProcessData(tc2005, puerco_area_raster)
zm_c_2000 <- ProcessData(tc2000, puerco_area_raster)
#TODO: verifiy only contains 0-100 value now

# get max percent value for all
all <- c(zm_c_2015, zm_c_2010, zm_c_2005, zm_c_2000)
minMaxAll <- minmax(all)
maxPercent <- max(minMaxAll[2,])
```

### Data Distributions

In @fig-perc the percent tree cover is visualized for the Puerco Project area, for the four years for which the tree cover data exists: 2000, 2005, 2010, 2015. Note that the color scale goes from 0 to 53 percent cover. This was the maximum value across all four years.

In @fig-diff the difference between percent tree cover between consecutive years is shown. This is calculated by subtracting the earlier year from the later year. Positive values indicate the tree cover went up for that pixel, negative values indicate the tree cover went down. We expect that regions of reduced tree cover will correlate with thinning treatments.

```{r figs, echo=FALSE}
#| label: fig-perc
#| fig-cap: "Percent Tree Cover for the Puerco Project Area, 2000-2015"
p <- levelplot(all, 
               at=seq(0, maxPercent),
               main="Percent Tree cover for the Puerco Project Area",
               xlab='UTM meters',
               ylab='UTM meters',
               margin=FALSE)
plot(p)
```

```{r echo=FALSE}
#| label: fig-diff
#| fig-cap: "Difference in Percent Tree Cover for consecutive years (later year - earlier year)"
diffs <- c(all$yr2015 - all$yr2010, all$yr2010-all$yr2005, all$yr2005-all$yr2000)
names(diffs) <- c("yr2015vs2010", "yr2010vs2005", "yr2005vs2000")
p <- levelplot(diffs, 
          main="Difference in Percent Tree cover for the Puerco Project Area",
          xlab='UTM meters',
          ylab='UTM meters',
          margin=FALSE,
          par.settings=list(panel.background=list(col="lightgrey"), 
                            strip.background=list(col="white")))
p <- diverge0(p, 'PiYG')
plot(p)
```

```{r echo=FALSE}
#| label: fig-plot
#| fig-cap: "Plot"
par(mfrow=c(2,2))
plot(1:10, col=2)
plot(density(runif(100, 0.0, 1.0)))
plot(runif(100, 0.0, 1.0),type="l")
```

in @fig-plot we see examples of plotting in R.
